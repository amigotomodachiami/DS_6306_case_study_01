hist(beerdata$ABV)
qqplot(beerdata$ABV)
?qqplot
plot(beerdata$AB)
plot(beerdata$ABV)
plot(beerdata$ABV, beerdata$Style)
plot(beerdata$ABV, beerdata$Ounces)
plot(beerdata$ABV, beerdata$IBU)
plot(beerdata$ABV, beerdata$Beer_ID)
plot(beerdata$ABV, beerdata$Brewery_id)
plot(beerdata$ABV, beerdata$Brewery_id)
summarry(beerdata$ABV)
summary(beerdata$ABV)
summary(beerdata$IBU)
typeof(pop.df)
as.table(pop.df)
as.matrix(pop.df)
pop.matrix <- as.matrix(pop.df)
?order
pop.matrix(order[Count),])
pop.df[order(Count),]
names(pop.df)
pop.df[order("Count"),]
typeof(popular.styles)
popular.styles
length(popular.styles)
length(popular.styles$Count)
t10styles <- popular.styles[1:20, ]
hist(t10styles)
hist(t10styles$Count)
t10styles
plot(t10styles$Style, t10styles$Count)
t10styles <- popular.styles[1:10, ]
plot(t10styles$Style, t10styles$Count
)
?plot
plot(t10styles$Style, t10styles$Count
cex = 2)
plot(t10styles$Style, t10styles$Count
,cex = 2)
plot(t10styles$Style, t10styles$Count
,cex = 1)
plot(t10styles$Style, t10styles$Count
,srt = 45)
?ggplot2
?ggplot
ggplot(Style, Count, data = t10styles, geom = "density")
qplot(Style, Count, data = t10styles, geom = "density")
ggplot(aes(x=Style, y=Count, fill=t10styles)) + geom_bar(stat="identity") + theme_bw()
knitr::opts_chunk$set(echo = TRUE)
ggplot(data=nytData, aes(x=ageGroup, y=Impressions, fill=ageGroup)) + geom_bar(stat="identity") + theme_bw()
knitr::opts_chunk$set(echo = TRUE)
#ggplot, gives it a dataset, and creates visualization
library(ggplot2)
?mpg
mpg
mpg %>%
ggplot(aes(x = class, fill = class)) +
geom_bar()
count(mpg, class) #counts classes in dataset
gplot(aes(x =cty, fill=class))+geom_histogram()
ggplot(data=nytData, aes(x=ageGroup, y=Impressions, fill=ageGroup)) + geom_bar(stat="identity") + theme_bw()
#requires packages "dplyr" and "ggplot2"
#install.package("dplyr")
#install.package("ggplot2"")
library(dplyr)
library(ggplot2)
library(tidyr)
#UNIT 6 Live Session Code! Including Breakouts!
#Sample?
#Population?
#vocab
#impression - when someone mouses over the ad
#clicks - actual clicks
#clickthrough rate - % of people who saw ad and actually clicked it
#load first day dataset
fileLocation <- "http://stat.columbia.edu/~rachel/datasets/nyt1.csv"
nytData <- read.csv(url(fileLocation))
head(nytData)
#stratified Age groups
str(nytData)
nytData$ageGroup <- cut(nytData$Age, c(-Inf, 18, 24, 34, 44, 54, 64, Inf))
levels(nytData$ageGroup) <- c("<18", "18-24", "25-34", "35-44", "45-54", "55-64", "65+")
#Transform gender to a factor variable
nytData$Gender = factor(nytData$Gender, levels=c(1,0), labels = c("male", "female"))
head(nytData)
#plot ageGroup and impressions
ggplot(data=nytData, aes(x=ageGroup, y=Impressions, fill=ageGroup)) + geom_bar(stat="identity") + theme_bw()
#plot ageGroup and impressions
nytData %>% filter(Impressions>0 & Signed_In == 1) %>% ggplot(aes(x=ageGroup, y=Impressions, fill=ageGroup)) + geom_bar(stat="identity") + theme_bw()
#(CTR = clicks/impressions) ; no CTR if there are no impressions
#conclusion <18 and 65+ have highest CTR
nytData %>% filter(Impressions>0 & Signed_In == 1) %>%
group_by(ageGroup) %>%
summarise(Impressions = sum(Impressions), Clicks = sum(Clicks)) %>%
ggplot(aes(x=ageGroup, y=Clicks/Impressions, fill=ageGroup)) + geom_bar(stat="identity") + theme_bw()
ggplot(data=nytData, aes(x=ageGroup, y=Impressions, fill=ageGroup)) + geom_bar(stat="identity") + theme_bw()
ggplot(data=t10styles, aes(x=Styles, y=Counts, fill=Styles)) + geom_bar(stat="identity") + theme_bw()
t10styles
ggplot(data=t10styles, aes(x=Style, y=Counts, fill=Style)) + geom_bar(stat="identity") + theme_bw()
ggplot(data=t10styles, aes(x=Style, y=Count, fill=Style)) + geom_bar(stat="identity") + theme_bw()
ggplot(data=t10styles, aes(x=Style, y=Count, fill=Style)) + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle=90, hjust=1, vjust=0.5))
ggplot(data=t10styles, aes(x=Style, y=Count, fill=Style)) + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle=45, hjust=1, vjust=0.5))
ggplot(data=t10styles, aes(x=Style, y=Count, fill=Style)) + geom_bar(stat="identity") + theme_bw()
ggplot(data=t10styles, aes(x=Style, y=Count, fill=Style)) + geom_bar(stat="identity") + theme(ais.text.x = 0)
ggplot(data=t10styles, aes(x=Style, y=Count, fill=Style)) + geom_bar(stat="identity") + theme(axis.title.x = element_blank())
ggplot(data=t10styles, aes(x=Style, y=Count, fill=Style)) + geom_bar(stat="identity") +p + theme(axis.title.x = element_blank())
ggplot(data=t10styles, aes(x=Style, y=Count, )) + geom_bar(stat="identity") + theme(axis.title.x = element_blank())
ggplot(data=t10styles, aes(x=Style, y=Count, fill=Style)) + geom_bar(stat="identity") + theme(axis.title.x = element_blank())
ggplot(data=t10styles, aes(x=Style, y=Count, fill=Style)) + geom_bar(stat="identity") + theme(axis.title.x = element_text(angle=60, hjust=1, vjust=0.5))
ggplot(data=t10styles, aes(x=Style, y=Count, fill=Style)) + geom_bar(stat="identity") + theme(axis.title.x = element_text(angle=45, hjust=1, vjust=0.5))
ggplot(data=t10styles, aes(x=Style, y=Count, fill=Style)) + geom_bar(stat="identity") + theme(axis.title.x = element_text(angle=45, hjust=1, vjust=0.5))
ggplot(data=t10styles, aes(x=Style, y=Count, fill=Style)) + geom_bar(stat="identity") + theme(axis.title.x = element_text(angle=90, hjust=1, vjust=0.5))
popular.styles
library(tidyr)
library(plyr)
library(jsonlite)
library(dplyr)
library(tidyverse)
NYTIMES_KEY = "gpHIYI6wPrysX3m3wV3OtDtCi4TUSf8Z" #Your Key Here â¦ get from NTY API website
#mykey should be gpHIYI6wPrysX3m3wV3OtDtCi4TUSf8Z
# Let's set some parameters
term <- "Central+Park+Jogger" # Need to use + to string together separate words
begin_date <- "19890419"
end_date <- "19910419"
baseurl <- paste0("http://api.nytimes.com/svc/search/v2/articlesearch.json?q=",term,
"&begin_date=",begin_date,"&end_date=",end_date,
"&facet_filter=true&api-key=",NYTIMES_KEY, sep="")
baseurl
initialQuery <- jsonlite::fromJSON(baseurl)
maxPages <- round((initialQuery$response$meta$hits[1] / 10)-1)
pages <- list()
for(i in 0:maxPages){
nytSearch <- jsonlite::fromJSON(paste0(baseurl, "&page=", i), flatten = TRUE) %>% data.frame()
message("Retrieving page ", i)
pages[[i+1]] <- nytSearch
Sys.sleep(6)
}
allNYTSearch <- rbind_pages(pages)
#Segmentation
# Visualize coverage by section
allNYTSearch %>%
group_by(response.docs.type_of_material) %>%
dplyr::summarize(count=n()) %>%
mutate(percent = (count / sum(count))*100) %>%
ggplot() +
geom_bar(aes(y=percent, x=response.docs.type_of_material, fill=response.docs.type_of_material), stat = "identity") + coord_flip()
knitr::opts_chunk$set(echo = TRUE)
#set directory to download location
setwd("D:/SMU/DS 6306 Doing Data Science/Unit07")
beerdata = read.csv("Beers.csv")
brewdata = read.csv("Breweries.csv")
summary(beerdata)
str(beerdata)
summary(brewdata)
str(brewdata)
library(ggplot2)
library(plotly)
library(dplyr)
#hist abv
hist(beerdata$ABV)
#count of styles
beerdata %>%
group_by(Style) %>%
summarise(no_rows = length(Style))
qplot(Ounces, ABV, data = beerdata)
#try to get listing of most popular styles of beer
popular.styles <- table(unlist(beerdata$Style))
#want to get this in order, descending
#maybe dataframe can sort and keep label
pop.df <- as.data.frame(popular.styles)
names(pop.df) <- c("Style", "Count")
popular.styles <- pop.df[order(pop.df$Count, decreasing = TRUE),]
#there we go
#graphit?
qplot(x = Style, y = Count, data = pop.df)
#kinda, too many xvars to see labels, but clearly A IPA is #1, APA next, and all others far behind
#compare to ABV? some have NA, non-alcholic beers?
#would need average abv per style...
#graph style vs instances using t10styles sample of top 0 styles
t10styles <- popular.styles[1:10, ]
plot(t10styles$Style, t10styles$Count)
ggplot(data=t10styles, aes(x=Style, y=Count, fill=Style)) + geom_bar(stat="identity") + theme(axis.title.x = element_text(angle=90, hjust=1, vjust=0.5))
#can use popular.styles$Style as descending list of styles
#want to add 3rd column to popular.styles, ABV, take abv , 100 styles?
#use popular.styles$Count to get iteration count for style?? maybe vector length
counter1 <- seq(1, length(beerdata$Name), )
counter2 <- seq(1, length(popular.styles$Style), 1)
pop.abv <- vector() #to cbind to popular.styles after population
for(i in counter2){ #start with most popular style
style.bucket <- popular.styles$Style[i]
x <- vector() #empty vector to append ABV matches
y <- vector() #mean of bucket
z <- vector()
for(n in counter1){ #go through primary df and put all matches in bucket
if(beerdata$Style[i]==style.bucket){
x <- append(x, beerdata$ABV)
}
#take length of bucket, sum and divide to get aveage abv - NVM there's a mean function
y <- mean(x)
#take that mean and append to pop.abv
pop.abv <- append(pop.abv, y)
}
}
#maybe this is too long, it's been 10 minutes...20... look at this later
summary(beerdata$ABV)
summary(beerdata$IBU) #get count of NA's
knitr::opts_chunk$set(echo = TRUE)
#set directory to download location
library(ggplot2)
library(plotly)
library(dplyr)
setwd("D:/SMU/DS 6306 Doing Data Science/Unit07")
beerdata = read.csv("Beers.csv")
brewdata = read.csv("Breweries.csv")
summary(beerdata)
str(beerdata)
str(brewdata)
names(beerdata)
names(beerdata) <- c("Name", "Beer_ID", "ABV", "IBU", "Brew_ID", "Style", "Ounces")
names(beerdata)
beermerge <- merge(beerdata, brewdata, by="Brew_ID")
head(beermerge, 6) #check top
tail(beermerge, 6) #check bottom
sapply(beermerge, function(x) sum(is.na(x)))
cmerge <- beermerge[complete.cases(beermerge),]
sapply(beermerge, function(x) sum(is.na(x)))
#clean out na's, means remove rows with na's???
cmerge <- beermerge[complete.cases(beermerge),]
sapply(beermerge, function(x) sum(is.na(x)))
#grep all rows with [statecode], median ABV IBU from there?
#test subset(beermerge, grepl("TX", beermerge$State)), ok
#i'll figure out a way to make a vector of statenames as char in order later, for now,
namelist <- c("AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA", "HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME", "MI", "MN", "MO", "MS", "MT", "NC", "ND", "NE", "NH", "NJ", "NM", "NV", "NY", "OH", "OK", "OR","PA", "RI", "SC", "SD", "TN", "TX", "UT", "VA", "VT", "WA", "WI", "WV", "WY", "NA")
state.frame <- data.frame() #create empty dataframes to fill
count1 <- seq(1, length(namelist), 1)
tABV <-seq(1, length(namelist), 1)
tIBU <- seq(1, length(namelist), 1)
for(i in count1){
y <- subset(beermerge, grepl(namelist[i], beermerge$State))#cycle through grepping(?) each row with specific state name
tABV[i] <- median(y$ABV)
tIBU[i] <- median(y$IBU)
}
state.stats1 <- data.frame(namelist, tABV, tIBU)
#But every single beer with listed state has no IBU/ABV???
##need to fix something with the merge or the grep function,  because there is no way that there aren't any beers with both the state and ABV field
summary(state.stats1)
state.stats1[1]
state.stats1[1,]
state.stats1[2,]
#grep all rows with [statecode], median ABV IBU from there?
#test subset(beermerge, grepl("TX", beermerge$State)), ok
#i'll figure out a way to make a vector of statenames as char in order later, for now,
namelist <- c("AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA", "HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME", "MI", "MN", "MO", "MS", "MT", "NC", "ND", "NE", "NH", "NJ", "NM", "NV", "NY", "OH", "OK", "OR","PA", "RI", "SC", "SD", "TN", "TX", "UT", "VA", "VT", "WA", "WI", "WV", "WY", "NA")
state.frame <- data.frame() #create empty dataframes to fill
count1 <- seq(1, length(namelist), 1)
tABV <-seq(1, length(namelist), 1)
tIBU <- seq(1, length(namelist), 1)
for(i in count1){
y <- subset(cmerge, grepl(namelist[i], cmerge$State))#cycle through grepping(?) each row with specific state name
tABV[i] <- median(y$ABV)
tIBU[i] <- median(y$IBU)
}
state.stats1 <- data.frame(namelist, tABV, tIBU)
#But every single beer with listed state has no IBU/ABV???
##need to fix something with the merge or the grep function,  because there is no way that there aren't any beers with both the state and ABV field
state.stats1[1, ]
state.stats1[2, ]
state.states1
state.stats1
summary(cmerge)
str(cmerge)
sapply(cmerge, function(x) sum(is.na(x)))
hist(state.stats1$tABV)
names(state.stats1$tABV)
typeof(state.stats1)
as.data.frame(state.stats1)
state.stats1 <- data.frame(namelist, tABV, tIBU)
typeof(state.stats1)
states2 <- as.data.frame(state.stats1)
typeof(sstates2)
typeof(states2)
state.stats1
states2
states1 <- data.frame(namelist, tABV, tIBU)
names(sstates1)
names(states1)
names(states1) <- c("State", "Median ABV", "Median IBU")
names(states1)
plot(states1$Median ABV, states1$Median `Median IBU`)
plot(states1$Median ABV, states1$Median IBU)
plot(states1$'Median ABV', states1$'Median IBU')
hist(states1$`Median ABV`)
install.packages(maps)
install.packages("maps")
library(maps)
states1
hist(states1$State)
hist(states1$`Median ABV`)
hist(states1$`Median IBU`)
sapply(beermerge, function(x) sum(is.na(x)))
states1
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plotly)
library(dplyr)
#hist abv
hist(beerdata$ABV)
#count of styles
beerdata %>%
group_by(Style) %>%
summarise(no_rows = length(Style))
qplot(Ounces, ABV, data = beerdata)
#try to get listing of most popular styles of beer
popular.styles <- table(unlist(beerdata$Style))
#want to get this in order, descending
#maybe dataframe can sort and keep label
pop.df <- as.data.frame(popular.styles)
names(pop.df) <- c("Style", "Count")
popular.styles <- pop.df[order(pop.df$Count, decreasing = TRUE),]
#there we go
#graphit?
qplot(x = Style, y = Count, data = pop.df)
#kinda, too many xvars to see labels, but clearly A IPA is #1, APA next, and all others far behind
#compare to ABV? some have NA, non-alcholic beers?
#would need average abv per style...
#graph style vs instances using t10styles sample of top 0 styles
t10styles <- popular.styles[1:10, ]
plot(t10styles$Style, t10styles$Count)
ggplot(data=t10styles, aes(x=Style, y=Count, fill=Style)) + geom_bar(stat="identity") + theme(axis.title.x = element_text(angle=90, hjust=1, vjust=0.5))
library(ggplot2)
library(plotly)
library(dplyr)
#hist abv
hist(beerdata$ABV)
#count of styles
beerdata %>%
group_by(Style) %>%
summarise(no_rows = length(Style))
qplot(Ounces, ABV, data = beerdata)
#try to get listing of most popular styles of beer
popular.styles <- table(unlist(beerdata$Style))
#want to get this in order, descending
#maybe dataframe can sort and keep label
pop.df <- as.data.frame(popular.styles)
names(pop.df) <- c("Style", "Count")
popular.styles <- pop.df[order(pop.df$Count, decreasing = TRUE),]
#there we go
#graphit?
qplot(x = Style, y = Count, data = pop.df)
#kinda, too many xvars to see labels, but clearly A IPA is #1, APA next, and all others far behind
#compare to ABV? some have NA, non-alcholic beers?
#would need average abv per style...
#graph style vs instances using t10styles sample of top 0 styles
t10styles <- popular.styles[1:10, ]
plot(t10styles$Style, t10styles$Count)
ggplot(data=t10styles, aes(x=Style, y=Count, fill=Style)) + geom_bar(stat="identity") + theme(axis.title.x = element_text(angle=45, hjust=1, vjust=0.5))
library(ggplot2)
library(plotly)
library(dplyr)
#hist abv
hist(beerdata$ABV)
#count of styles
beerdata %>%
group_by(Style) %>%
summarise(no_rows = length(Style))
qplot(Ounces, ABV, data = beerdata)
#try to get listing of most popular styles of beer
popular.styles <- table(unlist(beerdata$Style))
#want to get this in order, descending
#maybe dataframe can sort and keep label
pop.df <- as.data.frame(popular.styles)
names(pop.df) <- c("Style", "Count")
popular.styles <- pop.df[order(pop.df$Count, decreasing = TRUE),]
#there we go
#graphit?
qplot(x = Style, y = Count, data = pop.df)
#kinda, too many xvars to see labels, but clearly A IPA is #1, APA next, and all others far behind
#compare to ABV? some have NA, non-alcholic beers?
#would need average abv per style...
#graph style vs instances using t10styles sample of top 0 styles
t10styles <- popular.styles[1:10, ]
plot(t10styles$Style, t10styles$Count)
ggplot(data=t10styles, aes(x=Style, y=Count, fill=Style)) + geom_bar(stat="identity") + theme(axis.title.x = element_text(angle=90, hjust=1, vjust=0.5))
install.packages("ggthemes")
knitr::opts_chunk$set(echo = TRUE)
#set directory to download location
library(ggplot2)
library(plotly)
library(dplyr)
library(maps)
library(ggplot2)
library(ggthemes)
setwd("D:/SMU/DS 6306 Doing Data Science/Unit07")
beerdata = read.csv("Beers.csv")
brewdata = read.csv("Breweries.csv")
sc1 <- summary(brewdata$State)
sc2 <- as.data.frame(sc1)
names(sc2) <- ("Breweries per State")
sc2 #count of breweries per state in descending alphabetical order
#merge sets
#beermerge <- merge(beerdata, brewdata , all = TRUE, sort = FALSE)
#make brew_ID match the brewdata for merge
names(beerdata) <- c("Name", "Beer_ID", "ABV", "IBU", "Brew_ID", "Style", "Ounces")
beermerge <- merge(beerdata, brewdata, by="Brew_ID")
head(beermerge, 6) #check top
tail(beermerge, 6) #check bottom
sapply(beermerge, function(x) sum(is.na(x)))
#ABV 62 NA, IBU 1005 NA
#clean out na's, means remove rows with na's???
cmerge <- beermerge[complete.cases(beermerge),]
sapply(cmerge, function(x) sum(is.na(x)))
#ok, cmerge has no NA's
#grep all rows with [statecode], median ABV IBU from there?
#test subset(beermerge, grepl("TX", beermerge$State)), ok
#i'll figure out a way to make a vector of statenames as char in order later, for now,
namelist <- c("AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA", "HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME", "MI", "MN", "MO", "MS", "MT", "NC", "ND", "NE", "NH", "NJ", "NM", "NV", "NY", "OH", "OK", "OR","PA", "RI", "SC", "SD", "TN", "TX", "UT", "VA", "VT", "WA", "WI", "WV", "WY", "NA")
state.frame <- data.frame() #create empty dataframes to fill
count1 <- seq(1, length(namelist), 1)
tABV <-seq(1, length(namelist), 1)
tIBU <- seq(1, length(namelist), 1)
for(i in count1){
y <- subset(cmerge, grepl(namelist[i], cmerge$State))#cycle through grepping(?) each row with specific state name
tABV[i] <- median(y$ABV)
tIBU[i] <- median(y$IBU)
}
states1 <- data.frame(namelist, tABV, tIBU)
names(states1) <- c("State", "Median ABV", "Median IBU")
states1 #this is the median ABV/IBU by state
#dataset has no beers from dakota breweries with reported ABV or IBU
#ooh use us state map
getwd()
setwd(D:/SMU/DS 6306 Doing Data Science/Unit07)
setwd("D:/SMU/DS 6306 Doing Data Science/Unit07")
setwd("D:\SMU\DS 6306 Doing Data Science\DS_6306_case_study_01\DS_6306_case_study_01")
setwd("D:/SMU/DS 6306 Doing Data Science/DS_6306_case_study_01/DS_6306_case_study_01")
knitr::opts_chunk$set(echo = TRUE)
#setwd("D:/SMU/DS 6306 Doing Data Science/DS_6306_case_study_01/DS_6306_case_study_01")
beer_path="/Users/wailunchung/Documents/GitHub/MSDS-6306-Doing-Data-Science/Unit 7/Beers.csv"
beer_path="/Users/wailunchung/Documents/GitHub/MSDS-6306-Doing-Data-Science/Unit 7/Beers.csv"
brewery_path="/Users/wailunchung/Documents/GitHub/MSDS-6306-Doing-Data-Science/Unit 7/Breweries.csv
df
fdd
af
)
''
''
""
""fa'sdf'
asdf''
beer_path="/Users/wailunchung/Documents/GitHub/MSDS-6306-Doing-Data-Science/Unit 7/Beers.csv"
beer_path
beer_df=read.csv(beer_path)
beer_path="D:/SMU/DS 6306 Doing Data Science/DS_6306_case_study_01/DS_6306_case_study_01/Beers.csv"
brewery_path="D:/SMU/DS 6306 Doing Data Science/DS_6306_case_study_01/DS_6306_case_study_01/Breweries.csv"
beer_df=read.csv(beer_path)
brewery_df=read.csv(brewery_path)
brewery_df$State <- trim(brewery_df$State)
installed.packages()
library(ggplot2)
library(plotly)
library(dplyr)
library(maps)
library(ggplot2)
library(ggthemes)
brewery_df
library(s0s)
install.packages("sos")
library(sos)
results <- findFN("trim")
library(sos)
results <- findFN("trim")
results <- findFn("trim")
results
knitr::opts_chunk$set(echo = TRUE)
#setwd("D:/SMU/DS 6306 Doing Data Science/DS_6306_case_study_01/DS_6306_case_study_01")
#'x' is the column of a data.frame that holds 2 digit state codes
stateFromLower <-function(x) {
#read 52 state codes into local variable [includes DC (Washington D.C. and PR (Puerto Rico)]
st.codes<-data.frame(
state=as.factor(c("AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA",
"HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME",
"MI", "MN", "MO", "MS",  "MT", "NC", "ND", "NE", "NH", "NJ", "NM",
"NV", "NY", "OH", "OK", "OR", "PA", "PR", "RI", "SC", "SD", "TN",
"TX", "UT", "VA", "VT", "WA", "WI", "WV", "WY")),
full=as.factor(c("alaska","alabama","arkansas","arizona","california","colorado",
"connecticut","district of columbia","delaware","florida","georgia",
"hawaii","iowa","idaho","illinois","indiana","kansas","kentucky",
"louisiana","massachusetts","maryland","maine","michigan","minnesota",
"missouri","mississippi","montana","north carolina","north dakota",
"nebraska","new hampshire","new jersey","new mexico","nevada",
"new york","ohio","oklahoma","oregon","pennsylvania","puerto rico",
"rhode island","south carolina","south dakota","tennessee","texas",
"utah","virginia","vermont","washington","wisconsin",
"west virginia","wyoming"))
)
#create an nx1 data.frame of state codes from source column
st.x<-data.frame(state=x)
#match source codes with codes from 'st.codes' local variable and use to return the full state name
refac.x<-st.codes$full[match(st.x$state,st.codes$state)]
#return the full state names in the same order in which they appeared in the original source
return(refac.x)
}
#beer_path="/Users/wailunchung/Documents/GitHub/MSDS-6306-Doing-Data-Science/Unit 7/Beers.csv"
#brewery_path="/Users/wailunchung/Documents/GitHub/MSDS-6306-Doing-Data-Science/Unit 7/Breweries.csv"
beer_path="D:/SMU/DS 6306 Doing Data Science/DS_6306_case_study_01/DS_6306_case_study_01/Beers.csv"
brewery_path="D:/SMU/DS 6306 Doing Data Science/DS_6306_case_study_01/DS_6306_case_study_01/Breweries.csv"
beer_df=read.csv(beer_path)
brewery_df=read.csv(brewery_path)
# returns string w/o leading whitespace
trim.leading <- function (x)  sub("^\\s+", "", x)
brewery_df$State <- trim(brewery_df$State)
